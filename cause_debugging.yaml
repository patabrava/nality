Debug the code (systematically) by resoning step by step by FLOW_OF_THOUGHT and by following the MONOCODE principles.

MONOCODE
```yaml
        # ──────────────────────
        # Phase 3: Debugging
        # ──────────────────────
        debugging_principles:
        - name: Systematic Isolation
            instruction: "Separate the failing behaviour from the working parts through controlled experiments before applying fixes."
            sub_principles:
            - name: Minimal Reproducer
                instruction: "Create the shortest script or input that still triggers the bug."
            - name: Boundary Verification
                instruction: "Inspect data at each interface to locate where expectations diverge."
        
        - name: Hypothesis‑Driven Fixing
            instruction: "Form a clear root‑cause hypothesis, change one variable at a time, observe, and iterate."
            sub_principles:
            - name: Instrument First
                instruction: "Add or review logs/metrics around the suspected area before editing functional code."
            - name: Regression Tests
                instruction: "Write a test that fails with the bug and passes once the fix is in place."
        
        - name: Root‑Cause Documentation
            instruction: "Record what failed, why, and how it was fixed so future incidents resolve faster."
            sub_principles:
            - name: Post‑Mortem Note
                instruction: "Create a brief note or tracker entry linking to the fix and lessons learned."
        ```
END_MONOCODE

---

FLOW_OF_THOUGHT
```yaml
first_principles:
  nlir_reasoning:
    description: |
      Natural Language Inherent Reasoning (NLIR) structures thinking by sequentially:
      1. Decomposing a problem into a high-level question plus granular sub-questions,
      2. Reasoning through each using structured, logical templates,
      3. Reflecting on the emerging state,
      4. Solving the final atomic question,
      5. Refining and evaluating the result for completeness and consistency.
    principles:
      - name: Decomposition
        instruction: "Break the initial problem into one high-level question and clear sub-questions covering every aspect."
      - name: Structured Responses
        instruction: "Answer using any logical template—lists, if‑then, tables, decision trees—always organized and precise."
      - name: Reflection
        instruction: "After each batch of answers, state the current problem state, noting resolved parts and remaining gaps."
      - name: Solve
        instruction: "When the question is refined to a single atomic problem, produce a direct answer."
      - name: Refine & Evaluate
        instruction: "Review the entire chain, fix inconsistencies, and contract knowns into the final output."

  atomic_reasoning:
    description: |
      Atom of Thoughts (AoT) enhances NLIR by handling sub-question dependencies and focusing on one atomic state at a time.
    principles:
      - name: Dependency Identification
        instruction: "Classify sub-questions as independent or dependent based on whether they require other answers."
      - name: Contraction for Focus
        instruction: "Treat independent answers as known conditions and reformulate dependents into a single new question."
      - name: Iterative Cycle
        instruction: "Loop through Decompose → Reason → Reflect → Solve → Refine until the atomic question is directly solvable."

instructions:
  output_format: |
    Apply the FLOW_OF_THOUGHT instructions inside <think> tags (private reasoning), then deliver the complete answer without tags.
  process: |
    <think>
    1. Decompose (NLIR):
       - Analyze the user’s question; split into one high-level question and sub-questions.

    2. Reason (Structured Responses):
       - Answer each sub-question with a chosen logical template (list, decision tree, etc.).
       - Explicitly describe your reasoning for each.

    3. Reflect:
       - Summarize the current state: what’s solved, what remains.

    4. Solve:
       - Once reduced to a final atomic question, generate its direct answer.

    5. Refine & Evaluate:
       - Review all steps for consistency and completeness.
       - Maintain stable identifiers for sub-questions and states to trace the process.
       - Run this sanity checklist:
         - Did I answer every sub-question?
         - Does the final answer align with all earlier reasoning?
         - Are all terms and identifiers used consistently?

    6. AoT-Inspired Dependency Analysis:
       - Identify dependencies among sub-questions; mark them as independent or dependent.

    7. AoT Contraction:
       - Use independent answers as known premises, contract dependent ones into a new atomic question.

    8. Iterate:
       - Repeat steps 1–7 in the Decompose → Reason → Reflect → Solve → Refine cycle until fully solved.

    9. Final Sanity Check:
       - Re-run the sanity checklist above before exiting <think>.
    </think>
    (no-tags)
    [Final Answer]
    (no-tags)
``` 
END_FLOW_OF_THOUGHT

NOTE-- Apply the FLOW_OF_THOUGHT instructions in <think> xml tags to reason step by step, and then generate your output without xml tags (the user cannot see your reasoning in the think tags as it's private, so make sure you provide a complete response within the public output).